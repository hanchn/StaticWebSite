<!-- Media Library Header -->
<div class="admin-header">
    <div class="header-left">
        <h1 class="admin-title">
            <i class="fas fa-images"></i>
            媒体库
        </h1>
        <p class="admin-subtitle">
            管理您的图片、文档和其他媒体文件
        </p>
    </div>
    <div class="header-right">
        <button class="btn btn-primary" id="uploadFiles">
            <i class="fas fa-upload"></i>
            上传文件
        </button>
        <button class="btn btn-outline" id="createFolder">
            <i class="fas fa-folder-plus"></i>
            新建文件夹
        </button>
    </div>
</div>

<!-- Media Toolbar -->
<div class="media-toolbar">
    <div class="toolbar-left">
        <!-- Breadcrumb -->
        <nav class="breadcrumb" id="mediaBreadcrumb">
            <a href="#" data-path="" class="breadcrumb-item active">
                <i class="fas fa-home"></i>
                媒体库
            </a>
        </nav>
    </div>
    
    <div class="toolbar-center">
        <!-- Search -->
        <div class="search-box">
            <input type="text" id="mediaSearch" class="search-input" placeholder="搜索文件...">
            <button type="button" class="search-btn">
                <i class="fas fa-search"></i>
            </button>
        </div>
        
        <!-- Filters -->
        <div class="filter-group">
            <select id="fileTypeFilter" class="filter-select">
                <option value="">所有类型</option>
                <option value="image">图片</option>
                <option value="document">文档</option>
                <option value="video">视频</option>
                <option value="audio">音频</option>
                <option value="archive">压缩包</option>
                <option value="other">其他</option>
            </select>
            
            <select id="sortFilter" class="filter-select">
                <option value="date-desc">最新上传</option>
                <option value="date-asc">最早上传</option>
                <option value="name-asc">名称 A-Z</option>
                <option value="name-desc">名称 Z-A</option>
                <option value="size-desc">大小 大-小</option>
                <option value="size-asc">大小 小-大</option>
            </select>
        </div>
    </div>
    
    <div class="toolbar-right">
        <!-- View Toggle -->
        <div class="view-toggle">
            <button type="button" class="view-btn active" data-view="grid" title="网格视图">
                <i class="fas fa-th"></i>
            </button>
            <button type="button" class="view-btn" data-view="list" title="列表视图">
                <i class="fas fa-list"></i>
            </button>
        </div>
        
        <!-- Actions -->
        <div class="action-group">
            <button type="button" class="btn btn-outline btn-sm" id="selectAll">
                <i class="fas fa-check-square"></i>
                全选
            </button>
            <button type="button" class="btn btn-outline btn-sm" id="deleteSelected" disabled>
                <i class="fas fa-trash"></i>
                删除
            </button>
        </div>
    </div>
</div>

<!-- Media Stats -->
<div class="media-stats">
    <div class="stats-item">
        <span class="stats-label">总文件:</span>
        <span class="stats-value" id="totalFiles">0</span>
    </div>
    <div class="stats-item">
        <span class="stats-label">已选择:</span>
        <span class="stats-value" id="selectedFiles">0</span>
    </div>
    <div class="stats-item">
        <span class="stats-label">总大小:</span>
        <span class="stats-value" id="totalSize">0 B</span>
    </div>
    <div class="stats-item">
        <span class="stats-label">可用空间:</span>
        <span class="stats-value" id="availableSpace">-</span>
    </div>
</div>

<!-- Media Content -->
<div class="media-content">
    <!-- Loading State -->
    <div class="loading-state" id="loadingState">
        <div class="loading-spinner"></div>
        <p>加载中...</p>
    </div>
    
    <!-- Empty State -->
    <div class="empty-state" id="emptyState" style="display: none;">
        <div class="empty-icon">
            <i class="fas fa-folder-open"></i>
        </div>
        <h3>文件夹为空</h3>
        <p>拖拽文件到这里或点击上传按钮添加文件</p>
        <button class="btn btn-primary" onclick="document.getElementById('fileUpload').click()">
            <i class="fas fa-upload"></i>
            上传文件
        </button>
    </div>
    
    <!-- Grid View -->
    <div class="media-grid" id="mediaGrid">
        <!-- Files will be loaded here -->
    </div>
    
    <!-- List View -->
    <div class="media-list" id="mediaList" style="display: none;">
        <table class="media-table">
            <thead>
                <tr>
                    <th width="40">
                        <input type="checkbox" id="selectAllCheckbox">
                    </th>
                    <th width="60">预览</th>
                    <th>名称</th>
                    <th width="100">类型</th>
                    <th width="100">大小</th>
                    <th width="150">修改时间</th>
                    <th width="120">操作</th>
                </tr>
            </thead>
            <tbody id="mediaTableBody">
                <!-- Files will be loaded here -->
            </tbody>
        </table>
    </div>
</div>

<!-- Pagination -->
<div class="pagination-container" id="paginationContainer" style="display: none;">
    <div class="pagination-info">
        显示 <span id="pageStart">1</span> - <span id="pageEnd">20</span> 共 <span id="totalItems">0</span> 项
    </div>
    <div class="pagination" id="pagination">
        <!-- Pagination buttons will be generated here -->
    </div>
</div>

<!-- Upload Modal -->
<div id="uploadModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>上传文件</h3>
            <button type="button" class="modal-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="upload-area" id="uploadArea">
                <div class="upload-icon">
                    <i class="fas fa-cloud-upload-alt"></i>
                </div>
                <h4>拖拽文件到这里或点击选择</h4>
                <p>支持图片、文档、视频等多种格式</p>
                <button type="button" class="btn btn-primary" onclick="document.getElementById('fileUpload').click()">
                    选择文件
                </button>
                <input type="file" id="fileUpload" multiple style="display: none;">
            </div>
            
            <div class="upload-progress" id="uploadProgress" style="display: none;">
                <div class="progress-header">
                    <span>上传进度</span>
                    <span id="progressText">0%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div class="upload-files" id="uploadFiles">
                    <!-- Upload file items will be shown here -->
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-outline" data-action="cancel">取消</button>
            <button type="button" class="btn btn-primary" id="startUpload" disabled>开始上传</button>
        </div>
    </div>
</div>

<!-- File Info Modal -->
<div id="fileInfoModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>文件信息</h3>
            <button type="button" class="modal-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="file-info-content" id="fileInfoContent">
                <!-- File info will be loaded here -->
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-outline" data-action="cancel">关闭</button>
            <button type="button" class="btn btn-primary" id="copyFileUrl">复制链接</button>
        </div>
    </div>
</div>

<!-- Rename Modal -->
<div id="renameModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>重命名</h3>
            <button type="button" class="modal-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label for="newFileName" class="form-label">新名称</label>
                <input type="text" id="newFileName" class="form-input" placeholder="输入新的文件名">
                <div class="form-help">不包含文件扩展名</div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-outline" data-action="cancel">取消</button>
            <button type="button" class="btn btn-primary" id="confirmRename">确认</button>
        </div>
    </div>
</div>

<!-- Create Folder Modal -->
<div id="createFolderModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>新建文件夹</h3>
            <button type="button" class="modal-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label for="folderName" class="form-label">文件夹名称</label>
                <input type="text" id="folderName" class="form-input" placeholder="输入文件夹名称">
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-outline" data-action="cancel">取消</button>
            <button type="button" class="btn btn-primary" id="confirmCreateFolder">创建</button>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // 初始化媒体库
    initMediaLibrary();
    
    let currentPath = '';
    let currentView = 'grid';
    let selectedFiles = new Set();
    let allFiles = [];
    let filteredFiles = [];
    let currentPage = 1;
    const itemsPerPage = 20;
    
    function initMediaLibrary() {
        bindEvents();
        loadFiles();
        setupDragAndDrop();
    }
    
    function bindEvents() {
        // 上传相关
        document.getElementById('uploadFiles').addEventListener('click', openUploadModal);
        document.getElementById('fileUpload').addEventListener('change', handleFileSelect);
        document.getElementById('startUpload').addEventListener('click', startUpload);
        
        // 文件夹相关
        document.getElementById('createFolder').addEventListener('click', openCreateFolderModal);
        document.getElementById('confirmCreateFolder').addEventListener('click', createFolder);
        
        // 搜索和过滤
        document.getElementById('mediaSearch').addEventListener('input', debounce(handleSearch, 300));
        document.getElementById('fileTypeFilter').addEventListener('change', handleFilter);
        document.getElementById('sortFilter').addEventListener('change', handleSort);
        
        // 视图切换
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                switchView(this.dataset.view);
            });
        });
        
        // 选择相关
        document.getElementById('selectAll').addEventListener('click', toggleSelectAll);
        document.getElementById('selectAllCheckbox').addEventListener('change', toggleSelectAll);
        document.getElementById('deleteSelected').addEventListener('click', deleteSelectedFiles);
        
        // 模态框
        bindModalEvents();
        
        // 重命名
        document.getElementById('confirmRename').addEventListener('click', renameFile);
        
        // 复制链接
        document.getElementById('copyFileUrl').addEventListener('click', copyFileUrl);
    }
    
    function bindModalEvents() {
        // 关闭模态框
        document.querySelectorAll('.modal-close, [data-action="cancel"]').forEach(btn => {
            btn.addEventListener('click', function() {
                const modal = this.closest('.modal');
                closeModal(modal);
            });
        });
        
        // 点击背景关闭
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal(this);
                }
            });
        });
    }
    
    function setupDragAndDrop() {
        const uploadArea = document.getElementById('uploadArea');
        const mediaContent = document.querySelector('.media-content');
        
        [uploadArea, mediaContent].forEach(area => {
            area.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.classList.add('drag-over');
            });
            
            area.addEventListener('dragleave', function(e) {
                e.preventDefault();
                this.classList.remove('drag-over');
            });
            
            area.addEventListener('drop', function(e) {
                e.preventDefault();
                this.classList.remove('drag-over');
                
                const files = Array.from(e.dataTransfer.files);
                if (files.length > 0) {
                    handleFileSelect({ target: { files } });
                    if (area === mediaContent) {
                        openUploadModal();
                    }
                }
            });
        });
    }
    
    async function loadFiles(path = '') {
        try {
            showLoading();
            
            const response = await fetch(`/admin/api/media?path=${encodeURIComponent(path)}`);
            const result = await response.json();
            
            hideLoading();
            
            if (result.success) {
                allFiles = result.files;
                currentPath = path;
                updateBreadcrumb(path);
                applyFilters();
                updateStats();
            } else {
                showToast('加载文件失败: ' + result.message, 'error');
            }
        } catch (error) {
            hideLoading();
            showToast('加载文件失败', 'error');
            console.error('加载文件失败:', error);
        }
    }
    
    function applyFilters() {
        const searchTerm = document.getElementById('mediaSearch').value.toLowerCase();
        const typeFilter = document.getElementById('fileTypeFilter').value;
        const sortFilter = document.getElementById('sortFilter').value;
        
        // 过滤
        filteredFiles = allFiles.filter(file => {
            const matchesSearch = !searchTerm || file.name.toLowerCase().includes(searchTerm);
            const matchesType = !typeFilter || file.type === typeFilter;
            return matchesSearch && matchesType;
        });
        
        // 排序
        filteredFiles.sort((a, b) => {
            switch (sortFilter) {
                case 'date-desc':
                    return new Date(b.modified) - new Date(a.modified);
                case 'date-asc':
                    return new Date(a.modified) - new Date(b.modified);
                case 'name-asc':
                    return a.name.localeCompare(b.name);
                case 'name-desc':
                    return b.name.localeCompare(a.name);
                case 'size-desc':
                    return b.size - a.size;
                case 'size-asc':
                    return a.size - b.size;
                default:
                    return 0;
            }
        });
        
        currentPage = 1;
        renderFiles();
        renderPagination();
    }
    
    function renderFiles() {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageFiles = filteredFiles.slice(startIndex, endIndex);
        
        if (pageFiles.length === 0) {
            showEmptyState();
            return;
        }
        
        hideEmptyState();
        
        if (currentView === 'grid') {
            renderGridView(pageFiles);
        } else {
            renderListView(pageFiles);
        }
    }
    
    function renderGridView(files) {
        const mediaGrid = document.getElementById('mediaGrid');
        const mediaList = document.getElementById('mediaList');
        
        mediaGrid.style.display = 'grid';
        mediaList.style.display = 'none';
        
        mediaGrid.innerHTML = files.map(file => `
            <div class="media-item ${selectedFiles.has(file.path) ? 'selected' : ''}" data-path="${file.path}">
                <div class="media-checkbox">
                    <input type="checkbox" ${selectedFiles.has(file.path) ? 'checked' : ''} 
                           onchange="toggleFileSelection('${file.path}')">
                </div>
                
                <div class="media-preview" onclick="${file.isDirectory ? `loadFiles('${file.path}')` : `showFileInfo('${file.path}')`}">
                    ${getFileIcon(file)}
                </div>
                
                <div class="media-info">
                    <div class="media-name" title="${file.name}">${file.name}</div>
                    <div class="media-meta">
                        ${file.isDirectory ? '文件夹' : formatFileSize(file.size)}
                    </div>
                </div>
                
                <div class="media-actions">
                    <button type="button" class="action-btn" onclick="showFileInfo('${file.path}')" title="信息">
                        <i class="fas fa-info"></i>
                    </button>
                    ${!file.isDirectory ? `
                        <button type="button" class="action-btn" onclick="copyFileUrl('${file.url}')" title="复制链接">
                            <i class="fas fa-link"></i>
                        </button>
                    ` : ''}
                    <button type="button" class="action-btn" onclick="openRenameModal('${file.path}', '${file.name}')" title="重命名">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="action-btn delete" onclick="deleteFile('${file.path}')" title="删除">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('');
    }
    
    function renderListView(files) {
        const mediaGrid = document.getElementById('mediaGrid');
        const mediaList = document.getElementById('mediaList');
        const tableBody = document.getElementById('mediaTableBody');
        
        mediaGrid.style.display = 'none';
        mediaList.style.display = 'block';
        
        tableBody.innerHTML = files.map(file => `
            <tr class="${selectedFiles.has(file.path) ? 'selected' : ''}" data-path="${file.path}">
                <td>
                    <input type="checkbox" ${selectedFiles.has(file.path) ? 'checked' : ''} 
                           onchange="toggleFileSelection('${file.path}')">
                </td>
                <td>
                    <div class="file-thumbnail">
                        ${getFileIcon(file, true)}
                    </div>
                </td>
                <td>
                    <div class="file-name" onclick="${file.isDirectory ? `loadFiles('${file.path}')` : `showFileInfo('${file.path}')`}">
                        ${file.name}
                    </div>
                </td>
                <td>${file.isDirectory ? '文件夹' : getFileTypeText(file.type)}</td>
                <td>${file.isDirectory ? '-' : formatFileSize(file.size)}</td>
                <td>${formatDate(file.modified)}</td>
                <td>
                    <div class="action-buttons">
                        <button type="button" class="btn btn-sm btn-outline" onclick="showFileInfo('${file.path}')" title="信息">
                            <i class="fas fa-info"></i>
                        </button>
                        ${!file.isDirectory ? `
                            <button type="button" class="btn btn-sm btn-outline" onclick="copyFileUrl('${file.url}')" title="复制链接">
                                <i class="fas fa-link"></i>
                            </button>
                        ` : ''}
                        <button type="button" class="btn btn-sm btn-outline" onclick="openRenameModal('${file.path}', '${file.name}')" title="重命名">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-danger" onclick="deleteFile('${file.path}')" title="删除">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    }
    
    function getFileIcon(file, small = false) {
        const sizeClass = small ? 'icon-sm' : 'icon-lg';
        
        if (file.isDirectory) {
            return `<i class="fas fa-folder ${sizeClass}"></i>`;
        }
        
        if (file.type === 'image' && file.url) {
            return `<img src="${file.url}" alt="${file.name}" class="file-image ${sizeClass}">`;
        }
        
        const iconMap = {
            'image': 'fa-image',
            'document': 'fa-file-alt',
            'video': 'fa-video',
            'audio': 'fa-music',
            'archive': 'fa-file-archive',
            'other': 'fa-file'
        };
        
        const iconClass = iconMap[file.type] || 'fa-file';
        return `<i class="fas ${iconClass} ${sizeClass}"></i>`;
    }
    
    function getFileTypeText(type) {
        const typeMap = {
            'image': '图片',
            'document': '文档',
            'video': '视频',
            'audio': '音频',
            'archive': '压缩包',
            'other': '其他'
        };
        return typeMap[type] || '未知';
    }
    
    function updateBreadcrumb(path) {
        const breadcrumb = document.getElementById('mediaBreadcrumb');
        const parts = path ? path.split('/').filter(p => p) : [];
        
        let html = `
            <a href="#" data-path="" class="breadcrumb-item ${!path ? 'active' : ''}" onclick="loadFiles('')">
                <i class="fas fa-home"></i>
                媒体库
            </a>
        `;
        
        let currentPath = '';
        parts.forEach((part, index) => {
            currentPath += (currentPath ? '/' : '') + part;
            const isLast = index === parts.length - 1;
            html += `
                <span class="breadcrumb-separator">/</span>
                <a href="#" data-path="${currentPath}" 
                   class="breadcrumb-item ${isLast ? 'active' : ''}" 
                   onclick="loadFiles('${currentPath}')">
                    ${part}
                </a>
            `;
        });
        
        breadcrumb.innerHTML = html;
    }
    
    function updateStats() {
        const totalFiles = filteredFiles.length;
        const selectedCount = selectedFiles.size;
        const totalSize = filteredFiles.reduce((sum, file) => sum + (file.size || 0), 0);
        
        document.getElementById('totalFiles').textContent = totalFiles;
        document.getElementById('selectedFiles').textContent = selectedCount;
        document.getElementById('totalSize').textContent = formatFileSize(totalSize);
        
        // 更新删除按钮状态
        document.getElementById('deleteSelected').disabled = selectedCount === 0;
    }
    
    function renderPagination() {
        const totalPages = Math.ceil(filteredFiles.length / itemsPerPage);
        const paginationContainer = document.getElementById('paginationContainer');
        const pagination = document.getElementById('pagination');
        
        if (totalPages <= 1) {
            paginationContainer.style.display = 'none';
            return;
        }
        
        paginationContainer.style.display = 'flex';
        
        // 更新分页信息
        const startIndex = (currentPage - 1) * itemsPerPage + 1;
        const endIndex = Math.min(currentPage * itemsPerPage, filteredFiles.length);
        
        document.getElementById('pageStart').textContent = startIndex;
        document.getElementById('pageEnd').textContent = endIndex;
        document.getElementById('totalItems').textContent = filteredFiles.length;
        
        // 生成分页按钮
        let html = '';
        
        // 上一页
        html += `
            <button class="page-btn ${currentPage === 1 ? 'disabled' : ''}" 
                    onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>
                <i class="fas fa-chevron-left"></i>
            </button>
        `;
        
        // 页码
        const startPage = Math.max(1, currentPage - 2);
        const endPage = Math.min(totalPages, currentPage + 2);
        
        if (startPage > 1) {
            html += `<button class="page-btn" onclick="changePage(1)">1</button>`;
            if (startPage > 2) {
                html += `<span class="page-ellipsis">...</span>`;
            }
        }
        
        for (let i = startPage; i <= endPage; i++) {
            html += `
                <button class="page-btn ${i === currentPage ? 'active' : ''}" 
                        onclick="changePage(${i})">${i}</button>
            `;
        }
        
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                html += `<span class="page-ellipsis">...</span>`;
            }
            html += `<button class="page-btn" onclick="changePage(${totalPages})">${totalPages}</button>`;
        }
        
        // 下一页
        html += `
            <button class="page-btn ${currentPage === totalPages ? 'disabled' : ''}" 
                    onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>
                <i class="fas fa-chevron-right"></i>
            </button>
        `;
        
        pagination.innerHTML = html;
    }
    
    function switchView(view) {
        currentView = view;
        
        // 更新按钮状态
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.view === view);
        });
        
        renderFiles();
    }
    
    function handleSearch() {
        applyFilters();
    }
    
    function handleFilter() {
        applyFilters();
    }
    
    function handleSort() {
        applyFilters();
    }
    
    function changePage(page) {
        if (page < 1 || page > Math.ceil(filteredFiles.length / itemsPerPage)) return;
        currentPage = page;
        renderFiles();
        renderPagination();
    }
    
    function toggleFileSelection(filePath) {
        if (selectedFiles.has(filePath)) {
            selectedFiles.delete(filePath);
        } else {
            selectedFiles.add(filePath);
        }
        
        updateFileSelection();
        updateStats();
    }
    
    function toggleSelectAll() {
        const allSelected = selectedFiles.size === filteredFiles.length;
        
        if (allSelected) {
            selectedFiles.clear();
        } else {
            filteredFiles.forEach(file => selectedFiles.add(file.path));
        }
        
        updateFileSelection();
        updateStats();
    }
    
    function updateFileSelection() {
        // 更新网格视图
        document.querySelectorAll('.media-item').forEach(item => {
            const path = item.dataset.path;
            const checkbox = item.querySelector('input[type="checkbox"]');
            const isSelected = selectedFiles.has(path);
            
            item.classList.toggle('selected', isSelected);
            if (checkbox) checkbox.checked = isSelected;
        });
        
        // 更新列表视图
        document.querySelectorAll('#mediaTableBody tr').forEach(row => {
            const path = row.dataset.path;
            const checkbox = row.querySelector('input[type="checkbox"]');
            const isSelected = selectedFiles.has(path);
            
            row.classList.toggle('selected', isSelected);
            if (checkbox) checkbox.checked = isSelected;
        });
        
        // 更新全选复选框
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = selectedFiles.size === filteredFiles.length && filteredFiles.length > 0;
            selectAllCheckbox.indeterminate = selectedFiles.size > 0 && selectedFiles.size < filteredFiles.length;
        }
    }
    
    function showEmptyState() {
        document.getElementById('emptyState').style.display = 'block';
        document.getElementById('mediaGrid').style.display = 'none';
        document.getElementById('mediaList').style.display = 'none';
        document.getElementById('paginationContainer').style.display = 'none';
    }
    
    function hideEmptyState() {
        document.getElementById('emptyState').style.display = 'none';
    }
    
    function showLoading() {
        document.getElementById('loadingState').style.display = 'block';
        hideEmptyState();
    }
    
    function hideLoading() {
        document.getElementById('loadingState').style.display = 'none';
    }
    
    // 全局函数
    window.loadFiles = loadFiles;
    window.toggleFileSelection = toggleFileSelection;
    window.changePage = changePage;
    window.showFileInfo = showFileInfo;
    window.copyFileUrl = copyFileUrl;
    window.openRenameModal = openRenameModal;
    window.deleteFile = deleteFile;
    
    // 模态框相关函数
    function openUploadModal() {
        openModal(document.getElementById('uploadModal'));
    }
    
    function openCreateFolderModal() {
        openModal(document.getElementById('createFolderModal'));
    }
    
    function openModal(modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
    
    function closeModal(modal) {
        modal.style.display = 'none';
        document.body.style.overflow = '';
    }
    
    // 工具函数
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('zh-CN') + ' ' + date.toLocaleTimeString('zh-CN', { hour12: false });
    }
    
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
});
</script>